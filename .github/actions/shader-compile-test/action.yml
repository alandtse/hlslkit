name: "Shader Compilation Test"
description: "Test shader compilation with multiple shader_defines.yaml configurations. Requires hlslkit to be installed (use setup-hlslkit action first)."

inputs:
    shader-directory:
        description: "Directory containing HLSL shader files"
        required: true
    output-directory:
        description: "Directory for compiled shader output"
        required: false
        default: "build/ShaderCache"
    config-files:
        description: "Comma-separated list of shader_defines.yaml files to test"
        required: true
    max-warnings:
        description: "Maximum allowed new warnings"
        required: false
        default: "0"
    parallel-configs:
        description: "Whether to run multiple configs in parallel"
        required: false
        default: "true"
    fxc-path:
        description: "Path to fxc.exe (optional if in PATH)"
        required: false
    suppress-warnings:
        description: "Comma-separated list of warning codes to suppress (e.g., X1519,X3571)"
        required: false

runs:
    using: "composite"
    steps:
        - name: Create output directory
          shell: bash
          run: mkdir -p "${{ inputs.output-directory }}"

        - name: Parse and validate config files
          shell: bash
          id: parse-configs
          run: |
              IFS=',' read -ra CONFIGS <<< "${{ inputs.config-files }}"

              # Validate config files exist
              for config in "${CONFIGS[@]}"; do
                config=$(echo "$config" | xargs)  # trim whitespace
                if [[ ! -f "$config" ]]; then
                  echo "❌ Config file not found: $config"
                  exit 1
                fi
                echo "✅ Found config: $config"
              done
                echo "configs=${CONFIGS[*]}" >> $GITHUB_OUTPUT
              echo "config-count=${#CONFIGS[@]}" >> $GITHUB_OUTPUT

        - name: Run shader compilation tests
          shell: bash
          run: |
              IFS=',' read -ra CONFIGS <<< "${{ inputs.config-files }}"        # Function to build compilation command
              build_command() {
                local config="$1"
                local output_dir="$2"
                local cmd="poetry run hlslkit-compile --shader-dir '${{ inputs.shader-directory }}' --output-dir '$output_dir' --config '$config' --max-warnings ${{ inputs.max-warnings }}"

                if [[ -n "${{ inputs.fxc-path }}" ]]; then
                  cmd="$cmd --fxc '${{ inputs.fxc-path }}'"
                fi
                if [[ -n "${{ inputs.suppress-warnings }}" ]]; then
                  cmd="$cmd --suppress-warnings ${{ inputs.suppress-warnings }}"
                fi

                echo "$cmd"
              }

              # Function to execute compilation for a single config
              compile_config() {
                local config="$1"
                local log_file="$2"
                local config_name=$(basename "$config" .yaml)
                local output_dir="${{ inputs.output-directory }}/${config_name}"

                mkdir -p "$output_dir"
                echo "::group::Compiling with $config"

                local cmd=$(build_command "$config" "$output_dir")
                echo "Running: $cmd"

                if [[ -n "$log_file" ]]; then
                  # For parallel execution with log file
                  if eval "$cmd" > "$log_file" 2>&1; then
                    echo "✅ Compilation successful for $config"
                    cat "$log_file"
                  else
                    echo "❌ Compilation failed for $config"
                    cat "$log_file"
                    exit 1
                  fi
                else
                  # For sequential execution without log file
                  eval "$cmd"
                  echo "✅ Compilation completed for $config"
                fi

                echo "::endgroup::"
              }

              if [[ "${{ inputs.parallel-configs }}" == "true" ]]; then
                # Parallel execution
                pids=()
                temp_dir=$(mktemp -d)

                for config in "${CONFIGS[@]}"; do
                  config=$(echo "$config" | xargs)  # trim whitespace
                  config_name=$(basename "$config" .yaml)
                  log_file="${temp_dir}/${config_name}.log"

                  compile_config "$config" "$log_file" &
                  pids+=($!)
                done

                # Wait for all compilations to complete
                failed=0
                for i in "${!pids[@]}"; do
                  if ! wait "${pids[$i]}"; then
                    echo "❌ Compilation job $((i+1)) failed"
                    failed=1
                  fi
                done

                # Cleanup
                rm -rf "$temp_dir"

                if [ $failed -eq 1 ]; then
                  echo "One or more shader compilations failed"
                  exit 1
                fi

                echo "✅ All parallel compilations completed successfully"
              else
                # Sequential execution
                for config in "${CONFIGS[@]}"; do
                  config=$(echo "$config" | xargs)  # trim whitespace
                  compile_config "$config"
                done
              fi

        - name: Generate compilation summary
          shell: bash
          run: |
              echo "## Shader Compilation Summary" > compilation-summary.md
              echo "" >> compilation-summary.md
              echo "- **Shader Directory**: ${{ inputs.shader-directory }}" >> compilation-summary.md
              echo "- **Output Directory**: ${{ inputs.output-directory }}" >> compilation-summary.md
              echo "- **Max Warnings**: ${{ inputs.max-warnings }}" >> compilation-summary.md
              echo "- **Parallel Mode**: ${{ inputs.parallel-configs }}" >> compilation-summary.md
              echo "- **Suppress Warnings**: ${{ inputs.suppress-warnings }}" >> compilation-summary.md
              echo "- **Configurations Tested**:" >> compilation-summary.md

              IFS=',' read -ra CONFIGS <<< "${{ inputs.config-files }}"
              for config in "${CONFIGS[@]}"; do
                config=$(echo "$config" | xargs)
                echo "  - \`$config\`" >> compilation-summary.md
              done

              echo "" >> compilation-summary.md
              echo "✅ All shader compilations completed successfully!" >> compilation-summary.md

        - name: Upload compilation artifacts
          uses: actions/upload-artifact@v4
          with:
              name: shader-compilation-results-${{ github.run_id }}
              path: |
                  ${{ inputs.output-directory }}
                  compilation-summary.md
              retention-days: 7
              compression-level: 6
